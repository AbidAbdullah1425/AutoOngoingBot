import os
import logging
import re

logger = logging.getLogger(__name__)

def process_subtitle(input_file, output_file=None):
    """
    Process ASS subtitle file:
    1. Replace Script Info and Style sections with template
    2. Keep dialogs after episode number
    3. Maintain position tags
    4. Format episode number correctly
    """
    try:
        if output_file is None:
            output_file = f"processed_{os.path.basename(input_file)}"
            
        # Template for Script Info and Styles
        template = '''[Script Info]
; Script generated by FFmpeg/Lavc58.35.100
ScriptType: v4.00+
PlayResX: 384
PlayResY: 288

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Oath-Bold,20,&Hffffff,&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n'''

        with open(input_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        # Find dialogs and process them
        processed_dialogs = []
        episode_found = False
        episode_line = None
        
        for line in lines:
            if line.startswith('Dialogue:'):
                parts = line.split(',', 9)
                if len(parts) > 9:
                    text = parts[9].strip()
                    # Check if this is the main episode line (not "Next Episode")
                    if ('Episode:' in text or 'Episode' in text) and 'Next' not in text:
                        episode_found = True
                        # Extract episode number
                        episode_match = re.search(r'Episode:?\s*(\d+)', text)
                        if episode_match:
                            episode_num = episode_match.group(1)
                            # Format episode text with tilde
                            text = f"{{\\pos(193,265)}}Episode {episode_num} ~ [HeavenlySubs]\n"
                            parts[9] = text
                            episode_line = ','.join(parts)
                        continue
                    
                    # Process other dialogs after episode line is found
                    if episode_found:
                        # Keep original position tag
                        text = re.sub(r'{[^{}]*}', '', text)  # Remove existing tags
                        text = f"{{\\pos(193,265)}}{text}\n"  # Add position tag
                        parts[9] = text
                        processed_dialogs.append(','.join(parts))

        # Write the processed file
        with open(output_file, 'w', encoding='utf-8') as f:
            # Write template
            f.write(template)
            
            # Write episode line first
            if episode_line:
                f.write(episode_line)
            
            # Write remaining dialogs
            for dialog in processed_dialogs:
                f.write(dialog)

        logger.info(f"Successfully processed subtitle: {output_file}")
        return True, output_file
        
    except Exception as e:
        logger.error(f"Error processing subtitle: {e}")
        return False, str(e)